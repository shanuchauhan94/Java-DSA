package datastructure.linkedlist;

public class MyClass {
    public static void main(String args[]) {
      LL list = new LL();
      list.insertFirst(5);
      list.insertFirst(6);
      list.insertFirst(2);
      list.display();
      System.out.println();
      list.insertLast(4);
      list.display();
      System.out.println();
      list.insert(9,2);
      list.display();
      System.out.println();
      list.deleteFirst();
      list.display();
      System.out.println();
      list.deleteLast();
      list.display();
      System.out.println();
      list.delete(2);
      list.display();
      System.out.println();
      
      
    }
}

 class LL{
    
    Node head;
    Node tail;
    int size = 0;

    public void insertFirst(int val){

         Node newNode = new Node(val);
        if(head == null){
            head = newNode;
            return;
        }
        if(tail == null){
            tail = head;
        }
        newNode.next = head;
        head = newNode;
        size = size + 1;
    }

    public void insertLast(int val){
        Node newNode = new Node(val);

        if(tail == null){
           insertFirst(val);
           return;
        }
        tail.next = newNode;
        size++;
    }

    public void insert(int val,int index){
        if(index ==0){
            insertFirst(val);
            return;
        }
        if(index ==size){
            insertLast(val);
            return;
        }
        // to find index-1 Node(prev node of the given index value)
        Node prevIndexNode = get(index);
        Node newNode = new Node(val,prevIndexNode.next);
        prevIndexNode.next = newNode;
        size++;

    }

    public Node get(int index){
        Node temp = head;
        for(int i=1; i< index; i++){
            temp = temp.next;
        }
        return temp;
    }

    public int deleteFirst(){
        if(head == null){
            return 0;
        }
        if(tail == null){
            tail = head;
        }
         int val = head.val;
         head = head.next;
         size--;
         return val;
    }

    public int deleteLast(){
        if(tail == null){
            tail = head;
        }
        Node last2ndNode = get(size-1);
        int val = tail.val;
        last2ndNode = tail;
        tail.next = null;
        size--;
        return val;
    }

    public int delete(int index){
        if(index == 0){
            return deleteFirst();
        }
         if(index == size - 1){
            return deleteLast();
        }

          Node prev = get(index);      // [] -> [] -> [prev] -> [] -> [tail] -> null
          int val = prev.next.val;
          prev.next = prev.next.next;
          size--;
          return val;
    }


    public void display(){
        Node temp = head;
        while(temp != null){
            System.out.print(temp.val+" -> ");
            temp = temp.next;
        }
        System.out.print("null");
    }



    static class Node{
        int val;
        Node next;

        Node(int val){
            this.val = val;
        }
        Node(int val,Node next){
            this.val = val;
            this.next=next;
        }
    }
}